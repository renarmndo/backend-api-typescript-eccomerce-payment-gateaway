// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role{
buyer
seller
admin
superAdmin
}

enum status{
  active
  banned
  warning
  pending
}

enum BisnisType{
  individual
  company
  partnership
}


model User{
  id String @id @default(uuid())
  name String  @db.VarChar(200)
  email String @unique @db.VarChar(100)
  password String
  role role @default(buyer)
  status status @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi
  sellerProfile Seller?

  // user create categori
  categories CategoryProduct[]

  // relasi order
  order Order[]


// nama database
  @@map("m_users")
}


// tabel seller_profile
model Seller{
  id String @id @default(uuid())
  nama_usaha String @db.VarChar(255)
  tipe_usaha BisnisType @default(individual)
  deskripsi String?
  website String?

  // info
  no_tlp String @unique
  address String
  city String
  province String
  postalCode String?
  country String @default("indonesia")

  // BANK INFO
  bankName String
  bankAccount String
  accountHolder String


  // status
  status status @default(pending)
  rejectionReason String?
  verifiedAt DateTime?
  verifiedBy String?

  // document
  KTP String?

  isActive Boolean @default(true)
  commissionRate Float @default(0.05)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi
    userId String @unique
    user User @relation(fields: [userId],references: [id])

    products ProductSeller[]


  @@map("m_seller_profile")
}


model CategoryProduct {
  id String @id @default(cuid())
  name String @db.VarChar(255) @unique

  user User @relation(fields: [userId],references: [id])

  userId String
  products ProductSeller[]


  @@map("m_category_products")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  SOLD_OUT
}


model ProductSeller{
  id String @id @default(uuid())
  product_name String @db.VarChar(255)
  description String?
  price Decimal @db.Decimal(10,2) @default(0)
  stock Int
  image_url String?
  status ProductStatus @default(INACTIVE)
  discount Decimal? @db.Decimal(5,2)
  rating Decimal? @db.Decimal(2,1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categori_id String
  seller_id String
  

  // relasi

  category CategoryProduct @relation(fields: [categori_id],references: [id])

  seller Seller @relation(fields: [seller_id],references: [id])

  orders Order[]

@@map("m_seller_products")
}


enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}

model Order{
  id String @id @default(uuid())
  buyerId String
  productId String
  qty Int
  amount Decimal @db.Decimal(10,2) 
  status OrderStatus @default(PENDING)

  // xendit
  invoiceId String @unique
  invoiceUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer User @relation(fields: [buyerId],references: [id])
  product ProductSeller @relation(fields: [productId],references: [id])

  @@map("m_orders")
}